h1. Branches

Branches is an application for serving private git repositories securely using SSH.  It is based on the Python application with the same purpose, named "Gitosis":http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way, however implemented in Ruby and using configuration in Ruby rather than INI-style configuration files.

h2. Installation

To install the application, you can either install from the gem:

  sudo gem install branches

Or you can install from the source

  git clone git://github.com/krobertson/branches.git
  cd branches
  sudo rake install

Once Branches is installed, you'll want to create the system user that will be used to access the repositories.  On Ubuntu, you can use:

  sudo adduser \
    --system \
	--gecos 'git' \
    --shell /bin/sh \
    --group \
    --disabled-password \
    --home /home/git \
    git

And then 

To use the library, you'll need to build the project and drop the HopSharp.dll and the Newtonsoft.Json.dll in your site's bin directory.  To configure the library, you'll need to edit your web.config to include your API key for HopToad:

<pre>  <appSettings>
    <add key="Hoptoad:ApiKey" value="1234567890abcdefg"/>
  </appSettings></pre>

To programmatically report exceptions, all you need to do is ensure you've included the "HopSharp" namespace, and then call the SendToHoptoad method on the exception.  This is done using extension methods.  For example:

<pre>  using HopSharp;
  ...
  try {
	// some code
  }
  catch(Exception ex) {
	// ohhnoes
	ex.SendToHopToad();
  }</pre>

To use the HttpModule, you will just need to add it as an HttpHandler within your web.config:

<pre>  <httpModules>
    <add name="Hoptoad" type="HopSharp.NotifierHttpModule, HopSharp"/>
  </httpModules></pre>

h2. TODO

There are some important things to do on the HttpModule still.  Most importantly, it will be incredibly verbose on its exception handling.  In .NET, a 404 is considered an exception, so it will catch, report, and subsequently notify you of any time someone tries to access a URL that doesn't exist.

To circumvent this, plan on adding the ability to set a series of patterns that you can use to exclude exceptions based on exception type, part of the message, or something along those lines.